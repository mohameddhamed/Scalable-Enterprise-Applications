
package entities;

import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@Data
//Here we rely on the id values being autogenerated!
@EqualsAndHashCode(of={"id"})
@Entity
@NoArgsConstructor
@RequiredArgsConstructor
public class Employee implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;

    @NonNull
    @Column(length = 100)
    private String name;

    // Inverse side of a one-to-one relationship
    @OneToOne(mappedBy = "employee", cascade = CascadeType.ALL)
    private ParkingLot parkingLot;

    @NonNull
    // Owning side of a many-to-many relationship
    @ManyToOne(cascade = CascadeType.PERSIST)
    // Rename the joining column added to this table
    @JoinColumn(name = "dept_id", nullable = false)
    private Department department;

    // "Owning side" of a many-to-many relaionship
    @ManyToMany(cascade = CascadeType.PERSIST)
    // Rename the joining table and its columns created for the relation
    @JoinTable(name="scheduling",
        joinColumns = @JoinColumn(name = "emp_id"),
        inverseJoinColumns = @JoinColumn(name = "met_id"))
    private List<Meeting> meetings = new LinkedList<>();


    public void addMeeting(Meeting m) {
        this.meetings.add(m);
    }
}
